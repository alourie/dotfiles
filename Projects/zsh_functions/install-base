# vim:ft=zsh

function install_arch() {
    # Deps list, it's for arch; will need some update for debians/fedoras
    APPS="dunst polybar redshift feh network-manager-applet pasystray kitty neovim curl unzip tar starship rustup"
    for app in ${(@s/ /)APPS}; do
        if ! command -v $app > /dev/null; then
            # Not installed, just do all
            $sudo pacman -S --needed ${(@s/ /)APPS}
            break
        fi
    done

    # Install Paru
    if ! command -v paru > /dev/null; then
        cd $HOME/Projects

        rustup self upgrade-data
        rustup install stable
        rustup default stable

        sudo pacman -S --needed base-devel
        git clone https://aur.archlinux.org/paru.git
        cd paru
        makepkg -si
    fi

    #  currently I'm using JetBrains Mono, so expect it to be installed
    paru -y nerd-fonts-jetbrains-mono

}

function setup_npm() {
  echo "Setting up NPM"
  if [ ! -d $HOME/.npm-global ]; then
    mkdir $HOME/.npm-global
  fi
  npm config set prefix "$HOME/.npm-global"
}

function setup_neovim_config() {
  if [ ! -d $HOME/.config ]; then
    mkdir $HOME/.config
  fi
  git clone https://github.com/LunarVim/nvim-basic-ide.git ~/.config/nvim
  nvim
}

function setup_neovim() {
  if [ -d $HOME/.config/nvim ]; then
    echo ".nvim already exists, backup and rerun"
    exit 0
  fi
  setup_npm
  install_neovim
  setup_neovim_config
}

function install_neovim() {
  if [ ! -d $HOME/Projects/neovim ]; then
    echo "Installing Neovim"
    pushd $HOME/Projects
    git clone https://github.com/neovim/neovim 
    echo "CMAKE_EXTRA_FLAGS := -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/.local/" > neovim/local.mk
  fi
  cd neovim
  if [ "$1" = "update" ]; then
    echo "Updating neovim"
    git fetch -v
    git rebase
  fi
  make install
  popd
}

function install_lunarvim() {
  echo "Installing Lunarvim"
  cd $HOME
  PATH=$PATH:$HOME/.local/bin:$HOME/.cargo/bin bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh) -y
}

function install_debian() {
    echo "Set up debian system"

    sudo apt update
    sudo apt -y install \
      git curl wget \
      ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip curl doxygen npm pip \
      golang jq

    install_rust
}

function install_rust() {
  if ! command -v rustup > /dev/null; then
    sh -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" "" -y 
  fi

  export PATH="$PATH:$HOME/.cargo/bin"

  rustup self upgrade-data
  rustup install stable
  rustup default stable
}

function install_fedora() {
    echo "Set up fedora system"
}

function install_alpine() {
    APPS="zsh bash neovim curl unzip tar starship file npm"
    for app in "${(@s/ /)APPS}"; do
        if ! command -v $app > /dev/null; then
            # Not installed, just do all
            $sudo apk add ${(@s/ /)APPS}
            break
        fi
    done

    if ! command -v rustup > /dev/null; then
      sh -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" "" -y 
    fi

    export PATH="$PATH:$HOME/.cargo/bin"

    rustup self upgrade-data
    rustup install stable
    rustup default stable
}

# What OS are we running?
if command -v sudo > /dev/null; then
    sudo="sudo"
fi

if command -v apt > /dev/null; then
    install_debian
elif command -v apk > /dev/null; then
    install_alpine
elif command -v dnf > /dev/null; then
    install_fedora
elif command -v pacman > /dev/null; then
    install_arch
fi

